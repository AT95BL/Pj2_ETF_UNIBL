// Iz nekog razloga, rezultat zaista jeste onakav kako je predstavljen u objašnjenju zadatka!

public class BaseClass { 
	private void foo(){ 
		System.out.println("In BaseClass.foo()"); 
	} 
	void bar(){ 
		System.out.println("In BaseClass.bar()"); 
	} 
	public static void main(String[] args) {
		DerivedClass po = new DerivedClass(); 
		((BaseClass)po).foo(); 
		((BaseClass)po).bar(); 
	} 
} 
class DerivedClass extends BaseClass { 
	private void foo(){
		System.out.println("In Derived.foo()"); 
	} 
	void bar(){ 
		System.out.println("In Derived.bar()"); 
	} 
}

Hajde da analiziramo ovaj program kako bismo razumeli njegovo ponašanje i ispis.

### Struktura klasa

1. **Klasa `BaseClass`**:
   - **Metoda `foo()`**: Ovo je privatna metoda, što znači da je vidljiva samo unutar `BaseClass` i nije nasleđena ili dostupna van ove klase.
   - **Metoda `bar()`**: Ovo je paketno-privatna (default) metoda, vidljiva unutar paketa, ali dostupna i u klasi `DerivedClass` koja je u istom paketu (podrazumevano).

2. **Klasa `DerivedClass`**:
   - Nasleđuje `BaseClass`.
   - **Metoda `foo()`**: Ovo je privatna metoda u `DerivedClass`, ali pošto `foo()` nije nasleđena (zbog privatnosti u `BaseClass`), ona se ne override-uje već je to potpuno nova metoda, dostupna samo unutar `DerivedClass`.
   - **Metoda `bar()`**: Ova metoda override-uje `bar()` iz `BaseClass`.

3. **Metoda `main`**:
   - Kreira instancu `DerivedClass` i dodeljuje je promenljivoj `po`.
   - Izvršava dva metoda:
     - `((BaseClass)po).foo();`
     - `((BaseClass)po).bar();`

### Analiza izvršavanja

1. **`((BaseClass)po).foo();`**:
   - Pošto je `foo()` metoda u `BaseClass` privatna, ne može se pozvati preko instance `po` čak ni nakon kastovanja na `BaseClass`. U stvari, ovo neće kompajlirati u Javi, jer privatne metode nisu dostupne izvan svoje klase.
   - Ako bi ovo bilo moguće (u nekom hipotetičkom scenariju), pozvala bi se metoda `foo()` iz `BaseClass`, jer se metode biraju na osnovu tipa reference u trenutku kompajliranja, a ne na osnovu tipa objekta na koji referenca pokazuje.
   - **Očekivani ishod u stvarnom životu**: Program će se **ne kompajlirati** zbog privatne prirode metode `foo()`.

2. **`((BaseClass)po).bar();`**:
   - Ova metoda nije privatna i nasleđena je u `DerivedClass`. Iako kastujemo `po` na `BaseClass`, poziva se metoda `bar()` iz `DerivedClass`, jer Java koristi dinamičko vezivanje za ne-privatne metode.
   - Ovo će ispisati `"In Derived.bar()"`.

### Konačan ispis

U slučaju da privatna metoda `foo()` ne postoji, ili je promenjena u `protected` ili `public`, rezultat bi bio:

```
In BaseClass.foo()
In Derived.bar()
```

Međutim, zbog privatnosti metode `foo()` u `BaseClass`, program se neće kompajlirati, pa neće biti nikakvog ispisa.