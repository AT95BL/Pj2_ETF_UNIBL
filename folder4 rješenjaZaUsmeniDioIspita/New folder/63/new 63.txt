
public class D13 extends DI1.D2 implements DI1,DI2{ 
	public D13(){
		super(); 
		System.out.println("D1()"); 
	} 
	public static void main(String args[]){ 
		DI2 di1 = new D13(); 
		DI2 di2 = new D2(); 
		DI1 di3 = new D13(); 
		D13 d1 = new D13(); 
		D2 d2 = new DI1.D2(); 
		System.out.println(((DI2)new D13()).metoda()); 
		System.out.println(((DI2)d2).metoda()); 
	} 
	public int metoda(){ 
		System.out.println("D1 metoda"); return 1; 
	} 
} 
interface DI1{ 
	class D2 implements DI2{
		D2(){
			System.out.println("D2()"); 
		} 
		public int metoda(){ 
			System.out.println("D2 metoda"); return 0; 
		} 
	} 
} 
interface DI2{
	int metoda(); 
}


D2()
D1()
D2()
D2()
D1()
D2()
D1()
D2()
D2()
D1()
D1 metoda
1
D2 metoda
0

Hajde da analiziramo vaš kod i objasnimo izlaz.

### Analiza Koda

1. **Interfejsi i Klasa:**

    - **`DI1`** sadrži statičku klasu `D2` koja implementira interfejs `DI2`.
    - **`DI2`** je interfejs sa metodom `metoda()` koja vraća `int`.

2. **Klasa `D13`:**

    - Nasleđuje `DI1.D2` i implementira `DI1` i `DI2`.
    - Definiše metodu `metoda()` koja ispisuje "D1 metoda" i vraća `1`.

3. **Metoda `main`:**

    - Kreira različite instance i referencira ih pomoću različitih tipova.

### Razumevanje Koda

#### Inicijalizacija Objekata

- **`DI2 di1 = new D13();`**
    - Kreira instancu `D13` i dodeljuje je varijabli `di1` tipa `DI2`.
  
- **`DI2 di2 = new D2();`**
    - Kreira instancu `D2` (koja je statička klasa u `DI1` i implementira `DI2`) i dodeljuje je varijabli `di2` tipa `DI2`.

- **`DI1 di3 = new D13();`**
    - Kreira instancu `D13` i dodeljuje je varijabli `di3` tipa `DI1`.

- **`D13 d1 = new D13();`**
    - Kreira instancu `D13` i dodeljuje je varijabli `d1` tipa `D13`.

- **`D2 d2 = new DI1.D2();`**
    - Kreira instancu `D2` i dodeljuje je varijabli `d2` tipa `D2`.

#### Ispis Izlaza

1. **Instanciranje objekata:**

    - **`new D13()`**
        - Poziva konstruktor `D13` koji poziva `super()`, što je konstruktor `DI1.D2`.
        - Takođe, ispisuje "D2()" i "D1()".
  
2. **Metode u `main`:**

    - **`System.out.println(((DI2)new D13()).metoda());`**
        - Kreira novu instancu `D13`, poziva metodu `metoda()` na njoj, koja ispisuje "D1 metoda" i vraća `1`. Dakle, ispisuje:
        ```
        D2()
        D1()
        D1 metoda
        1
        ```

    - **`System.out.println(((DI2)d2).metoda());`**
        - `d2` je instanca `DI1.D2` i poziva `metoda()` iz `DI1.D2` koja ispisuje "D2 metoda" i vraća `0`. Dakle, ispisuje:
        ```
        D2 metoda
        0
        ```

### Konačni Izlaz

Konačni izlaz programa je:

```
D2()
D1()
D1 metoda
1
D2 metoda
0
```

### Objašnjenje

- **`D2` Konstruktor:** Kada se instancira `D13`, prvo se poziva konstruktor `D2`, što ispisuje "D2()". Nakon toga, konstruktor `D13` se nastavlja i ispisuje "D1()".
  
- **`metoda()` u `D13`:** `metoda()` u `D13` ispisuje "D1 metoda" i vraća `1`.

- **`metoda()` u `D2`:** `metoda()` u `D2` ispisuje "D2 metoda" i vraća `0`. 

Dakle, kod koristi polimorfizam da pozove implementaciju metode koja odgovara konkretnoj instanci objekta.