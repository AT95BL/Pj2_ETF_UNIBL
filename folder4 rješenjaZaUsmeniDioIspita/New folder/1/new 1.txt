// Find the output of the following code
// Hint: olovkom/odokativno raščlani cjeline!!
// Odvoji klase, odvoji metode, pogledaj šta se dešava u main-metodi..

public class C1 { 
	public static void main(String args[]) {
		C1 c1 = new C1(); 
		C2 c2 = new C2(); 
		try { 
			System.out.println(c1.metoda(c1)); 
			System.out.println(c1.metoda(c2)); 
			System.out.println(c2.metoda(c1)); 
			System.out.println(c2.metoda(c2)); 
		} catch(CE1 e) { 
			System.out.println("exception 1"); 
		} finally { 
			System.out.println("finally"); 
		} 
	} 
	Object metoda(C1 c) throws CE1 { 
		if (c instanceof C1) { 
			System.out.println("metoda"); 
		} else { 
			throw new CE2(); 
		} return 1; 
	} 
} 
	class C2 extends C1 { 
	Object metoda (C1 c) throws CE1 { 
		if( errorCheck() && c instanceof C2) { 
			throw new CE2("error 2"); 
		} else if (c instanceof C2) { 
			throw new CE1(); 
		} else { 
			return new String("abc"); 
		} 
	} 
	boolean errorCheck(){ return true; } 
	} 
	class CE1 extends Throwable { 
		public CE1() { System.out.println("ce1 - 1"); } 
		public CE1(String s) { 
			super(s); 
			System.out.println("ce1 - 2"); 
		} 
	}

	class CE2 extends RuntimeException { 
		public CE2() {
			System.out.println("ce2 - 1"); 
		} 
		public CE2(String s) {
			this(); 
			System.out.println("ce2 - 2"); 
		} 
	}
	
---------------------------------------------------------------------------------------------------------------------------------------------------------
Da bismo razumjeli ispis programa, analizirat ćemo korak po korak šta se dešava kada se izvršava svaki dio koda.

### Struktura klasa i metoda

- **Klasa `C1`**:
  - Ima metodu `metoda(C1 c)` koja vraća objekat tipa `Object`. Ako je argument `c` instanca klase `C1`, ispisuje `"metoda"`, inače baca izuzetak `CE2`.
  
- **Klasa `C2`**:
  - Nasljeđuje klasu `C1` i override-uje metodu `metoda(C1 c)`. Metoda prvo provjerava uslov `errorCheck()`. 
	Ako je uslov tačan i `c` je instanca klase `C2`, baca izuzetak `CE2`. 
	Ako `c` jeste instanca `C2`, ali uslov `errorCheck()` nije zadovoljen, baca izuzetak `CE1`. U suprotnom, vraća string `"abc"`.
  
- **Klase `CE1` i `CE2`**:
  - Obje predstavljaju izuzetke. `CE1` nasljeđuje `Throwable`, dok `CE2` nasljeđuje `RuntimeException`.

### Analiza izvršavanja

1. **`c1.metoda(c1)`**:
   - `c1` je instanca `C1`.
   - Poziva se metoda `metoda(C1 c)` iz klase `C1`, gdje je `c1` prosleđen kao argument.
   - `c` je instanca `C1`, pa se ispisuje `"metoda"` i vraća se `1`.
   - Rezultat: `"metoda"`, zatim ispisuje `1`.

2. **`c1.metoda(c2)`**:
   - `c2` je instanca `C2`, ali metoda `metoda(C1 c)` iz klase `C1` se koristi.
   - `c` je instanca `C2`, ali pošto je `C2` podklasa `C1`, ispisuje se `"metoda"` i vraća se `1`.
   - Rezultat: `"metoda"`, zatim ispisuje `1`.

3. **`c2.metoda(c1)`**:
   - `c2` je instanca `C2` i koristi se metoda iz klase `C2`.
   - Argument `c` je instanca `C1`, pa pada u else granu i vraća string `"abc"`.
   - Rezultat: ispisuje `"abc"`.

4. **`c2.metoda(c2)`**:
   - `c2` je instanca `C2`, koristi se metoda iz klase `C2`.
   - `errorCheck()` vraća `true`, i `c` je instanca `C2`, pa se baca izuzetak `CE2`.
   - Konstruktor `CE2` ispisuje `"ce2 - 1"`, ali pošto je string argument prosleđen, poziva se i `"ce2 - 2"`.
   - Izuzetak `CE2` je `RuntimeException`, pa ga `catch` blok ne hvata. Program prelazi u `finally` blok.
   - Rezultat: `"ce2 - 1"`, `"ce2 - 2"`, zatim `"finally"`.

### Konačan ispis
- `"metoda"`
- `1`
- `"metoda"`
- `1`
- `"abc"`
- `"ce2 - 1"`
- `"ce2 - 2"`
- `"finally"`