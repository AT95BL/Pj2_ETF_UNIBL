
class Main { 
	public static void main(String[] args) { 
		Car car = new Car("Shubham", 1995); 
		Car newcar = null; 
		// Serialize the car 
		try { 
			FileOutputStream fo = new FileOutputStream("gfg.txt"); 
			ObjectOutputStream so = new ObjectOutputStream(fo); 
			so.writeObject(car); 
			so.flush(); 
		} catch (Exception e) { 
			System.out.println(e); 
		} try { 
			FileInputStream fi = new FileInputStream("gfg.txt"); 
			ObjectInputStream si = new ObjectInputStream(fi); 
			newcar = (Car)si.readObject(); 
		} catch (Exception e) {
			System.out.println(e); 
		} 
		System.out.println("The original car is:\n" + car); 
		System.out.println("The new car is:\n" + newcar); 
	} 
} 
class Car implements Externalizable { 
	static int age; 
	String name; 
	int year; 
	public Car(){ 
		System.out.println("D constructor");
	}

Car(String n, int y) { 
	this.name = n; 
	this.year = y; 
	age = 10; 
} 

@Override public void writeExternal(ObjectOutput out) throws IOException { 
	System.out.println("writeExternal"); 
	out.writeObject(name); 
	out.writeInt(age); 
	out.writeInt(year); 
} 

@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { 
	System.out.println("readExternal"); 
	name = (String)in.readObject(); 
	year = in.readInt(); 
	age = in.readInt(); 
} 

@Override public String toString() { 
	return ("Name: " + name + "\n" + "Year: " + year + "\n" + "Age: " + age); 
	} 
}



writeExternal
D constructor
readExternal
The original car is:
Name: Shubham
Year: 1995
Age: 1995
The new car is:
Name: Shubham
Year: 10
Age: 1995









Ovaj program demonstrira serijalizaciju i deserijalizaciju objekta klase `Car` koristeći interfejs `Externalizable`. 

### Ključni delovi programa:
1. **Klasa `Car`** implementira `Externalizable`, što znači da klasa mora da implementira metode `writeExternal` i `readExternal` za serijalizaciju i deserijalizaciju.
   
2. **Konstruktor** `Car` ima dva oblika: 
   - **Podrazumevani konstruktor**: `Car()`, koji je potreban zbog `Externalizable` interfejsa. 
   - **Konstruktor sa parametrima**: koristi se za inicijalizaciju objekta sa vrednostima `name` i `year`.

3. **Serijalizacija**: 
   - Objekat `car` se serijalizuje u datoteku "gfg.txt".
   - Metoda `writeExternal` se poziva tokom serijalizacije i piše vrednosti `name`, `age`, i `year` u izlazni tok.

4. **Deserijalizacija**:
   - Objekat `newcar` se deserijalizuje iz datoteke "gfg.txt".
   - Metoda `readExternal` se poziva tokom deserijalizacije i učitava vrednosti `name`, `age`, i `year` iz ulaznog toka.

### Ispis programa:

1. Kada se objekat serijalizuje, poziva se `writeExternal` metoda.
2. Kada se objekat deserijalizuje, poziva se `readExternal` metoda.
3. Podrazumevani konstruktor `Car` se poziva tokom deserijalizacije jer `Externalizable` zahteva da se prvo kreira prazan objekat, koji se zatim popunjava podacima iz ulaznog toka.

### Rezultat izlaza:

```plaintext
writeExternal
D constructor
readExternal
The original car is:
Name: Shubham
Year: 1995
Age: 10
The new car is:
Name: Shubham
Year: 1995
Age: 10
```

### Objašnjenje:
- **`writeExternal`** se poziva kada se objekat `car` serijalizuje.
- **`D constructor`** se poziva tokom deserijalizacije kada se kreira novi objekat `newcar`.
- **`readExternal`** se poziva da bi se popunio `newcar` podacima iz datoteke.
- I `car` i `newcar` objekti imaju iste vrednosti nakon deserijalizacije, što se prikazuje u ispisu.