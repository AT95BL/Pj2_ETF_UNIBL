PAZI! -ako se slučajno u zadatku desi to da je Constructor neke od navedenih klasa okarakterisan sa "private" --onda nema nikakvih ispisa jer se code neće uspješno kompajlirati!

A1-S --znači, static-block se uvijek prvi izvršava!!
A1-N --non-static-block ide zatim,
A1 --Constructor Call
metoda A1,
A2-S
A3-S
A4-S
pa slijedi niz ponavljanja
A1-N
A1

sve tako dok
zatim, zbog rekruzije u klasi A4: private A2 a2 = new A2(new A1(new A1(new A1(new A2()))));
dolazi do StackOverflowError

Exception in thread "main" java.lang.StackOverflowError
        at java.base/java.io.BufferedOutputStream.implWrite(BufferedOutputStream.java:220)
        at java.base/java.io.BufferedOutputStream.write(BufferedOutputStream.java:200)
        at java.base/java.io.PrintStream.implWrite(PrintStream.java:643)
        at java.base/java.io.PrintStream.write(PrintStream.java:623)
        at java.base/sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:291)
        at java.base/sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:386)
        at java.base/sun.nio.cs.StreamEncoder.lockedFlushBuffer(StreamEncoder.java:117)
        at java.base/sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)
        at java.base/java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:190)
        at java.base/java.io.PrintStream.implWriteln(PrintStream.java:849)
        at java.base/java.io.PrintStream.writeln(PrintStream.java:826)
        at java.base/java.io.PrintStream.println(PrintStream.java:1168)

Znači, ako je zadatak tipa "Puno klasa, pozivaju se Constructor-i .." onda se problem svodi na:
	1) nađi StackOverflowError
	2) možda je negdje u nekoj klasi, Constructor iste okarakterisan sa private što znači da poziv istog mimo te klase dovodi do pucanja programa



Dobijaš taj rezultat zbog kombinacije statičkih i nestatičkih blokova inicijalizacije, konstrukcija objekata, i rekurzivne konstrukcije objekata koja uzrokuje **StackOverflowError**. Evo detaljnog objašnjenja:

1. **Statički blokovi inicijalizacije**:
   - Statički blokovi se izvršavaju samo jednom, pri prvom učitavanju klase, pre nego što se kreira bilo koji objekat. Zbog toga dobijaš redosled:
     - `A1-S` (statički blok klase `A1`)
     - `A2-S` (statički blok klase `A2`, jer je `A2` izvedena klasa iz `A1`)
     - `A3-S` (statički blok klase `A3`, jer je `A3` izvedena iz `A2`)
     - `A4-S` (statički blok klase `A4`, jer je `A4` izvedena iz `A3`)

2. **Nestatički blokovi i konstruktori**:
   - Kada kreiraš objekat `A1`, prvo se izvršava nestatički blok, zatim konstruktor:
     - `A1-N` (nestatički blok klase `A1`)
     - `A1` (konstruktor klase `A1`)

3. **Rekurzivno kreiranje objekata u klasi `A4`**:
   - U klasi `A4`, imaš polje `a2` koje je instanca klase `A2`. Prilikom inicijalizacije ovog polja, koristiš konstruktor `A2` koji uzima kao parametar instancu klase `A1`, ali konstrukcija instance klase `A1` je rekurzivna:
     ```java
     private A2 a2 = new A2(new A1(new A1(new A1(new A2()))));
     ```
   - Ova rekurzivna konstrukcija objekata uzrokuje beskonačan niz poziva konstruktora, gde se neprekidno kreiraju novi objekti `A1` i `A2`, što dovodi do iscrpljivanja steka i rezultira **StackOverflowError**.

4. **StackOverflowError**:
   - Java stek ima ograničenu veličinu, i svaki novi rekurzivni poziv dodaje novi sloj na stek. Zbog toga rekurzija ne može da se izvrši beskonačno, pa na kraju dobijamo:
     ```
     Exception in thread "main" java.lang.StackOverflowError
     ```

### Kako izbjeći problem?
Možeš izbeći ovu grešku tako što ćeš eliminisati ili prekinuti rekurzivnu inicijalizaciju objekata. Na primer, prilagodi inicijalizaciju objekata u klasi `A4` da ne koristi rekurzivne pozive na konstruktore.


Ovo:

```
A2-S
A3-S
A4-S
```

se pojavljuje zbog načina na koji Java učitava klase i izvršava **statičke blokove inicijalizacije**. Kada se neka klasa prvi put koristi, pre nego što se kreira instanca ili pozove bilo koja metoda, Java prvo inicijalizuje sve statičke članove i statičke blokove te klase, kao i statičke blokove svih njenih roditeljskih klasa.

### Evo redosleda kojim se stvari odvijaju:

1. **`A1`**:
   - Kada se u `main` metodi kreira instanca klase `A1` (linija `A1 a1 = new A1();`), klasa `A1` se učitava i njen **statički blok** (`A1-S`) se prvo izvršava, jer je to prva klasa u hijerarhiji koja je referencirana.

2. **`A2`**:
   - Klasa `A2` je izvedena iz `A1`. Statički blok `A2-S` se izvršava čim se prvi put pojavi referenca na `A2`. To se dešava prilikom kreiranja instance `A2` u `new A2(a1)` ili kroz rekurziju u `A4`. Zbog toga dobijaš ispis `A2-S`.

3. **`A3`**:
   - Isto važi i za klasu `A3`, koja je izvedena iz `A2`. Statički blok `A3-S` se izvršava pre nego što se bilo šta drugo u toj klasi koristi. Prvi put kad se referencira `A3` (npr. pri instanciranju `A4`, koji nasleđuje `A3`), njen statički blok se izvršava, pa dobijaš ispis `A3-S`.

4. **`A4`**:
   - Klasa `A4` nasleđuje `A3`, a kada se kreira instanca `A4`, njen statički blok (`A4-S`) se takođe izvršava. Prvi put kad referenciraš `A4` (bilo da kreiraš instancu ili koristiš statičke članove), statički blok `A4-S` se poziva, pa dobijaš `A4-S`.

### Statički blokovi se izvršavaju samo jednom
Zato je važno napomenuti da se **statički blokovi** izvršavaju samo jednom po klasi, i to kada se klasa prvi put koristi. Zato dobijaš ispis:

```
A2-S
A3-S
A4-S
```

**pre nego što dođe do StackOverflowError** i beskonačnog kreiranja objekata, jer Java najpre mora da inicijalizuje klase (`A2`, `A3`, `A4`) pre nego što dođe do instanciranja.

