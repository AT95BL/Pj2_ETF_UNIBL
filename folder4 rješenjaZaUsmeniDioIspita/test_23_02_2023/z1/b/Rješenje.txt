
Pogledaj sljedeći Java code snippet:

public class B1 {
protected B1(){ System.out.println("B1"); }
double x = 0;
public static void main(String[] args) throws Exception {
new B1().metoda();
B2 b2 = new B2(3.5);
B3 b3 = new B3(b2);
if(b2.equals(b3)){
B1 b[][] = {{b2, b3}, {b2}};
for (B1[] tmp : b) {
for(B1 b1: tmp) {
System.out.println(b1.metoda());
}
}
}else
new B3(b2).metoda();
B1 b1 = (B1) new B1().clone();
System.out.println(b1.metoda().metoda());
}
public B2 metoda(){
return new B2();
}
@Override
public int hashCode() {
return (int) x;
}
@Override
public boolean equals(Object obj) {
B1 tmp = (B1) obj;
if(tmp.hashCode()==this.hashCode())
return true;
return false;
}
}
class B2 extends B1 {
int x = 1;
public B2(){
System.out.println("B2");
}
B2(B2 b2){
System.out.println("B2 - 1");
}
B2(double x){
x = x;
System.out.println("B2 - 2");
}
public B3 metoda(){
return new B3(this);
}
void setX(int x){
x = x;
}
@Override
public String toString() {
return super.toString() + " : " + x;
}
}
class B3 extends B2 implements BI {
int x = 0;
B3(B2 b2){
System.out.println("B3");
x = b2.x;
b2.setX(x);
}
public B3 metoda(){
return new B3(new B2());
}
}
interface BI {
B2 metoda();
Object clone() throws CloneNotSupportedException;
int hashCode();
}

pa na osnovu njega, objasni mi zašto dobijam ovakav error:

C:\Users\Korisnik.DESKTOP-JVOQTMK\Desktop\test_23_02_2023\z1\b>javac *.java
B1.java:59: error: clone() in Object cannot implement clone() in BI
class B3 extends B2 implements BI {
^
  attempting to assign weaker access privileges; was public
1 error




Greška koju dobijate je uzrokovana pokušajem implementacije metode `clone()` iz interfejsa `BI` u klasi `B3`. Problem je u tome što je metod `clone()` u klasi `Object` (iz koje sve klase u Javi nasleđuju) definisan kao **`protected`**, dok je u interfejsu `BI` deklarisan kao **`public`**. Ovo dovodi do greške jer ne možete smanjiti nivo pristupa prilikom implementacije metode koja je deklarisana u interfejsu.

### Zašto se ovo dešava?

1. **Metoda `clone()` u klasi `Object`**:
   - U klasi `Object`, metod `clone()` je deklarisan sa zaštitnim (protected) pristupom:
     ```java
     protected Object clone() throws CloneNotSupportedException;
     ```
   - To znači da možete pozvati `clone()` samo iz iste klase ili iz podklasa, ali nije dostupan spolja (izvan paketa ili hijerarhije nasleđivanja).

2. **Metoda `clone()` u interfejsu `BI`**:
   - U interfejsu `BI`, vi ste deklarisali metod `clone()` kao **`public`**:
     ```java
     Object clone() throws CloneNotSupportedException;
     ```
   - Kada implementirate interfejs, morate da obezbedite metodu sa istim (ili širim) nivoom pristupa kao što je deklarisano u interfejsu. Međutim, u klasi `B3`, metod `clone()` nasleđuje se iz `Object` klase, gde je `protected`, što je slabiji nivo pristupa u odnosu na `public`.

### Kako rešiti problem?

Postoje dva načina da rešite ovaj problem:

#### 1. Prepišite metod `clone()` u klasi `B3` i eksplicitno ga postavite kao `public`:
   - Ovo će zadovoljiti zahteve interfejsa jer interfejs očekuje da metod `clone()` bude javan.
   ```java
   @Override
   public Object clone() throws CloneNotSupportedException {
       return super.clone();  // ili implementirajte kloniranje po potrebi
   }
   ```

#### 2. Uklonite metod `clone()` iz interfejsa `BI`:
   - Ako ne želite da radite sa metodom `clone()`, možete ukloniti njegovu deklaraciju iz interfejsa `BI`. Na ovaj način nećete biti prisiljeni da implementirate metod `clone()` sa javnim pristupom.

#### Konačno rešenje

Ako odaberete prvu opciju, vaša klasa `B3` bi izgledala ovako:

```java
class B3 extends B2 implements BI {
    int x = 0;
    
    B3(B2 b2){
        System.out.println("B3");
        x = b2.x;
        b2.setX(x);
    }
    
    public B3 metoda(){
        return new B3(new B2());
    }
    
    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();  // ili vaša implementacija kloniranja
    }
}
```